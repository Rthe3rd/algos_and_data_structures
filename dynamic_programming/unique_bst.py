# 96. Unique Binary Search Trees


def unique_bst(self, n):
    # number of trees given by n = 0 and n = 1 are 1, so values are initialized to 1 
    # array is length 1 since we are going from 0 to 1
    number_of_trees = [1] * (n + 1) 
    # we need to compute the number of trees for each number of nodes from 0 to n
    # lower bound is 2 since the number of trees for 0 and 1 nodes is already solved and in our number_of_trees cache
    # upper bound is n + 1 since range will iterate through the values [0, 1, 2... n-1]
    for number_of_nodes in range(2, n + 1):
        # total number 
        total = 0
        for root_node_value in range(1, number_of_nodes + 1):
            # How many trees will be in the left subtree?
            left = root_node_value - 1
            # How many trees will be in the right subtree?
            right = number_of_nodes - root_node_value
            # Total number of trees is equal to the summartipon of left and right values multiplied together
            total += number_of_trees[left] * number_of_trees[right]
        number_of_trees[number_of_nodes] = total
    return number_of_trees[n]

print(unique_bst(3, 3))


class Solution(object):
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        number_of_trees = [1] * (n + 1)

        # since we already know the values of the number of trees for 0 and 1, we can start at 2
        for number_of_nodes_in_tree in range(2, n + 1):
            # this value is tracking the total number trees for the given "number of nodes in the tree"
            total = 0 
            # the value of the node that is to be considered as the root
                # the node value goes from 1 -> n which is generated by range(1, number_of_nodes_in_tree + 1)
            for root_node_value in range(1, number_of_nodes_in_tree + 1):
                # when the given node value is the root, how many nodes are in left/right subtrees from the root
                left = root_node_value - 1
                right = number_of_nodes_in_tree - root_node_value
                # using the number of trees previously calculated (and the base cases of 0 and 1 nodes) calculate the total number of tees if the given node is the root node
                total += number_of_trees[left] * number_of_trees[right]
            # the new value calculate here is stored and used for subsequent iterations/calculations
            number_of_trees[number_of_nodes_in_tree] = total

        return number_of_trees[n]